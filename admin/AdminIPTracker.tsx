import React, { useState } from 'react';
import { Target, Loader2, MapPin } from 'lucide-react';

interface LocationResult {
    ip: string;
    city: string;
    region: string;
    country: string;
    lat: number;
    lng: number;
}

const AdminIPTracker: React.FC = () => {
    const [ipAddress, setIpAddress] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [result, setResult] = useState<LocationResult | null>(null);
    const [error, setError] = useState<string | null>(null);

    // Basic regex for IPv4 validation
    const isValidIp = (ip: string) => {
        const regex = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
        return regex.test(ip);
    };

    // --- MOCK IP GEOLOCATION API ---
    const fetchIpLocation = (ip: string): Promise<LocationResult> => {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                if (ip.startsWith('103.12.')) { // IPs generated by the app
                     resolve({
                        ip: ip,
                        city: 'Kolkata',
                        region: 'West Bengal',
                        country: 'IN',
                        lat: 22.5726,
                        lng: 88.3639,
                    });
                } else if (ip === '8.8.8.8') {
                    resolve({
                        ip: ip,
                        city: 'Mountain View',
                        region: 'California',
                        country: 'US',
                        lat: 37.422,
                        lng: -122.084,
                    });
                } else {
                     // Simulate a random location for other valid IPs
                    resolve({
                        ip: ip,
                        city: 'Mumbai',
                        region: 'Maharashtra',
                        country: 'IN',
                        lat: 19.0760,
                        lng: 72.8777,
                    });
                }
            }, 1500); // Simulate network delay
        });
    };
    // --- END MOCK API ---

    const handleTrackIp = async () => {
        setError(null);
        setResult(null);
        if (!isValidIp(ipAddress)) {
            setError('Please enter a valid IPv4 address.');
            return;
        }
        setIsLoading(true);
        try {
            const locationData = await fetchIpLocation(ipAddress);
            setResult(locationData);
        } catch (e) {
            setError('Could not retrieve location for this IP address.');
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div className="animate-fade-in-up">
            <h1 className="text-3xl font-bold text-heading-light dark:text-heading-dark mb-6">IP Address Tracker</h1>
            <div className="bg-card-light dark:bg-card-dark p-6 rounded-lg shadow-md max-w-2xl mx-auto">
                <h2 className="text-xl font-bold text-heading-light dark:text-heading-dark mb-2">Track Location from IP</h2>
                <p className="text-text-light dark:text-text-dark mb-4">
                    Enter an IP address to get its estimated geographical location. This is a simulation for demonstration purposes.
                </p>
                <div className="flex flex-col sm:flex-row items-center gap-3">
                    <input
                        type="text"
                        value={ipAddress}
                        onChange={(e) => setIpAddress(e.target.value)}
                        placeholder="e.g., 103.12.155.88"
                        className="flex-grow w-full p-3 border border-border-light dark:border-border-dark bg-background-light dark:bg-slate-700 dark:text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                    />
                    <button
                        onClick={handleTrackIp}
                        disabled={isLoading || !ipAddress}
                        className="w-full sm:w-auto bg-gradient-to-r from-primary to-accent text-white font-bold py-3 px-6 rounded-lg flex items-center justify-center text-lg shadow-lg hover:shadow-glow-primary transition-all transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        {isLoading ? <Loader2 className="animate-spin mr-2" /> : <Target className="mr-2" />}
                        {isLoading ? 'Tracking...' : 'Track IP'}
                    </button>
                </div>
                {error && <p className="text-red-500 text-sm mt-3">{error}</p>}
            </div>

            {result && (
                <div className="mt-8 bg-card-light dark:bg-card-dark p-6 rounded-lg shadow-md max-w-2xl mx-auto animate-fade-in">
                    <h3 className="text-lg font-bold text-heading-light dark:text-heading-dark mb-4">Location Result for <span className="text-primary font-mono">{result.ip}</span></h3>
                    <div className="space-y-2 text-text-light dark:text-text-dark">
                        <p><strong>City:</strong> {result.city}</p>
                        <p><strong>Region:</strong> {result.region}</p>
                        <p><strong>Country:</strong> {result.country}</p>
                        <p><strong>Coordinates:</strong> <span className="font-mono">{result.lat.toFixed(4)}, {result.lng.toFixed(4)}</span></p>
                    </div>
                    <div className="mt-4">
                         <a
                            href={`https://www.google.com/maps?q=${result.lat},${result.lng}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="inline-flex items-center bg-blue-500 text-white font-bold py-2 px-4 rounded-lg shadow-md hover:bg-blue-600 transition-all"
                        >
                            <MapPin className="mr-2" size={16} /> Open in Google Maps
                        </a>
                    </div>
                </div>
            )}
        </div>
    );
};

export default AdminIPTracker;
